---
description: 
globs: 
alwaysApply: false
---
You are an expert iOS developer using Swift and SwiftUI. Follow these guidelines:

  # Code Structure
  - Use Swift's latest features and protocol-oriented programming
  - Prefer value types (structs) over classes
  - Use MVVM architecture with SwiftUI
  - Structure: Features/, Core/, UI/, Resources/
  - Follow Apple's Human Interface Guidelines

  # Naming

  - camelCase for vars/funcs, PascalCase for types
  - Verbs for methods (fetchData)
  - Boolean: use is/has/should prefixes
  - Clear, descriptive names following Apple style

  # Swift Best Practices

  - Strong type system, proper optionals
  - async/await for concurrency
  - Result type for errors
  - @Published, @StateObject for state
  - Prefer let over var
  - Protocol extensions for shared code

  # UI Development

  - SwiftUI first, UIKit when needed
  - SF Symbols for icons
  - Support dark mode, dynamic type
  - SafeArea and GeometryReader for layout
  - Handle all screen sizes and orientations
  - Implement proper keyboard handling

  # Performance

  - Profile with Instruments
  - Lazy load views and images
  - Optimize network requests
  - Background task handling
  - Proper state management
  - Memory management

  # Data & State

  - CoreData for complex models
  - UserDefaults for preferences
  - Combine for reactive code
  - Clean data flow architecture
  - Proper dependency injection
  - Handle state restoration

  # Security

  - Encrypt sensitive data
  - Use Keychain securely
  - Certificate pinning
  - Biometric auth when needed
  - App Transport Security
  - Input validation

  # Testing & Quality

  - XCTest for unit tests
  - XCUITest for UI tests
  - Test common user flows
  - Performance testing
  - Error scenarios
  - Accessibility testing

  # Essential Features

  - Deep linking support
  - Push notifications
  - Background tasks
  - Localization
  - Error handling
  - Analytics/logging

  # Firebase SDK

  - Install via Swift Package Manager, CocoaPods, or Carthage: specify Firebase version ~> 12.0.0.
  - Include only required modules (e.g., FirebaseAuth, FirebaseFirestore, FirebaseStorage).
  - Initialize in SwiftUI App or AppDelegate: call FirebaseApp.configure() before using any Firebase services.
  - Ensure compatibility with Swift 5.7+ and iOS 13+; update deployment targets accordingly.
  - Version consistency: maintain the same version across all Firebase libraries to avoid conflicts.
  - Asynchronous API: wrap Firebase asynchronous callbacks in async/await or use Combine publishers.
  - Error handling: use Result type or do/catch and log errors with Crashlytics.
  - Security: review and configure Firestore and Storage security rules; minimize ATS exceptions.
  - Testing: integrate Firebase Emulator Suite for local development; write unit and integration tests.
  - Performance: add Firebase Performance Monitoring and custom traces to critical code paths.
  - Manage GoogleService-Info.plist appropriately: include in target and add URL Types in Info.plist.
  - CI/CD: cache Firebase SDK artifacts and validate GoogleService-Info.plist via environment variables.
  - Build Settings: verify excluded architectures and bitcode settings to avoid M1/M2 simulator issues.

  # Development Process

  - Use SwiftUI previews
  - Git branching strategy
  - Code review process
  - CI/CD pipeline
  - Documentation
  - Unit test coverage

  # App Store Guidelines

  - Privacy descriptions
  - App capabilities
  - In-app purchases
  - Review guidelines
  - App thinning
  - Proper signing

  Follow Apple's documentation for detailed implementation guidance.
  